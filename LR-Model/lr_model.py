# -*- coding: utf-8 -*-
"""LR-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sDeKtu0nntDmJzdTcwt5WXDALf631IUd

# Load Data to preprocessing
"""

!pip install rarfile

import requests
from io import BytesIO
from zipfile import ZipFile
from  glob  import glob
from rarfile import RarFile


import numpy as np
from scipy.io import loadmat
import pandas as pd
import matplotlib.pyplot as plt

# Final parsed dataset shapes:

# data_x:
# - Shape: (n_samples, 128*128) = (n_samples, 16384)
# - Each row is a flattened grayscale airfoil image, normalized to [0,1] range
# - Image loaded from 16-bit PNG, scaled by dividing by 65535

# data_y:
# - Shape: (n_samples, 1)
# - Each entry is the LDR (Lift-to-Drag Ratio) for the corresponding airfoil image
# - Values are normalized by the global maximum (ymax)

# Normalization_Factor:
# - Scalar value used to normalize data_y
# - Can be used later to denormalize predictions: predicted_LDR * Normalization_Factor

# Saved output:
# - all_data.mat containing: {'data_x', 'data_y', 'Normalization_Factor'}

url = 'https://github.com/ziliHarvey/CNN-for-Airfoil/raw/refs/heads/master/data/parsed_data/1_300.rar'
request_is = requests.get(url)

with open("train.rar", "wb") as f:
  f.write(request_is.content)

with RarFile("train.rar" ,'r') as rar:
    rar.extractall("train")

data = loadmat("/content/train/1_300.mat")

#get the data as X and Y

X=data['data_x']
Y=data['data_y']

#show X and Y sample
print(X[0].reshape(128,128).max() ,"mean no airfoil - white")
print(X[0].reshape(128,128).min(), 'mean have airfiol -black')

plt.imshow(X[5000].reshape(128,128) , cmap='gray')
plt.colorbar()
plt.show()

print(f'the Lift-To-Drag Ratiovalue is :{Y[0]*308.9993}')

Normalization_Factor=data['Normalization_Factor']

del data

"""# Apply Liner regression model"""

from sklearn.model_selection import train_test_split
from sklearn.metrics         import mean_squared_error ,r2_score

X_train, X_test, y_train, y_test = train_test_split(
    X, Y, test_size=.2, random_state=42)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import EarlyStopping , ReduceLROnPlateau,ModelCheckpoint

es = EarlyStopping(
    monitor="val_loss",
    patience=3,
    verbose=1,
    restore_best_weights=True

)

rop = ReduceLROnPlateau(
    monitor="val_loss",
    factor=0.2,
    patience=2,
    verbose=1,
    min_lr=1e-9
)

mcp=ModelCheckpoint(
       "pre.keras",
    monitor="val_loss",
    verbose=1,
    save_best_only=True,

)

cb =[mcp,rop,es]

LR = Sequential([
    Dense(1 , input_dim=X.shape[1] ,kernel_initializer='zeros' , bias_initializer='zeros' )
])

LR.compile(optimizer="adam", loss='mse' , metrics=['mae'])

LR.fit(X_train, y_train, epochs=40 , callbacks=cb  , validation_split=.05)

from tensorflow.keras.models import load_model
My_model = load_model("LR_model.keras")

# model for predict test
y_pred_test= My_model.predict(X_test)

# model for predict train
y_pred_train = My_model.predict(X_train)

# mse for test data
mean_squared_error(y_pred_test , y_test)

# mse for train data
mean_squared_error(y_pred_train,y_train)

# r2 for test data
r2_score(y_test,y_pred_test)

# r2 for train data
r2_score(y_train,y_pred_train)

"""# Make plots as in Paper"""

plt.figure(figsize=(14,8))
x_h = np.arange(len(X_test)+1)
plt.plot(x_h[1:] , y_test ,ls="--" , color="r" , alpha=.8 ,label="actual")
plt.plot(x_h[1:] , y_pred_test ,ls="-." , color="b" , alpha=1 ,label="predicted")
plt.xlabel("Data")
plt.ylabel("Value")
plt.legend()
plt.tight_layout()
plt.title("LR model results ")
plt.savefig("results.png", dpi=300)
plt.show()







